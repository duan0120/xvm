#!/usr/bin/env bash

xvm() {
    if [[ "$XVM_ROOT" = "" ]]; then
		echo "XVM_ROOT not set. Please source \$XVM_ROOT/xvm"
		return $?
	fi

	if [[ ! -d $XVM_ROOT ]]; then
		echo "XVM_ROOT does not exist. Please reinstall XVM"
		return $?
	fi

    mkdir -p $XVM_ROOT/versions > /dev/null 2>&1
    mkdir -p $XVM_ROOT/envs > /dev/null 2>&1

	. "$XVM_ROOT/scripts/functions" || return 1

	command=$1
	shift

	case $command in
		"--version"|"-v")
			display_message "xvm version $XVM_VERSION"
			;;
		"--help"|"-h")
			display_message "Usage: xvm <command> [options]"
			display_message "Commands:"
			display_message "  -v, --version  Show the version of xvm"
			display_message "  -h, --help     Show help for xvm"
			display_message "  node           Manage node versions"
			display_message "  go             Manage go versions"
			display_message "  python         Manage python versions"
			display_message "  help           Show help for a command"
			display_message ""
			display_message "See 'xvm help <command>' for information on a specific command."
			;;
		"help")
			sub_command=$1
			shift
			if [ -f "$XVM_ROOT/scripts/$sub_command" ]; then
				bash "$XVM_ROOT/scripts/$sub_command" "--help"
			else
				display_message "Usage: xvm <command> [options]"
			fi
			;;
		"python")
			if [ -f "$XVM_ROOT/scripts/python" ]; then
				if [ "$1" = "use" ] || [ "$1" = "alias" ] || [ "$1" = "activate" ] || [ "$1" = "deactivate" ]; then
					sub_command="python_$1"
					. "$XVM_ROOT/scripts/$command-scripts/$1"

					shift
					"$sub_command" "$@"
				else
					bash "$XVM_ROOT/scripts/$command" "$@"
				fi
			else
				display_message "Usage: xvm <command> [options]"
			fi
			;;
		*)
			if [ -f "$XVM_ROOT/scripts/$command" ]; then
				if [ "$1" = "use" ]; then
					command_use="$command"_use
					. "$XVM_ROOT/scripts/$command-scripts/use"
					shift
					"$command_use" "$@"
				else
					bash "$XVM_ROOT/scripts/$command" "$@"
				fi
			else
				display_message "Usage: xvm <command> [options]"
			fi
			;;
	esac
}
